# services/keepalive.py
from __future__ import annotations

import asyncio
import random
import time
from typing import Iterable, List, Optional, Sequence, Union
from zoneinfo import ZoneInfo

from pyrogram.errors import FloodWait, PeerFlood
from pyrogram.enums import ChatAction

from settings import get
from db_modules.controller import DatabaseController
from telegram.botpool import BotPool

# --- —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º ---
stop_keepalive = asyncio.Event()
_keepalive_tasks: dict[int, asyncio.Task] = {}  # executor_id -> task


# === –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—á–∏—Ç–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ settings.get()) ===
# KEEPALIVE_ENABLED: bool            (default True)
# KEEPALIVE_GROUP: str | int         (username "@mygroup" –∏–ª–∏ id "-100...")
# KEEPALIVE_MIN_SEC: int             (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, —Å–µ–∫, default 600 = 10 –º–∏–Ω—É—Ç)
# KEEPALIVE_MAX_SEC: int             (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, —Å–µ–∫, default 2400 = 40 –º–∏–Ω—É—Ç)
# KEEPALIVE_TYPING_MAX: int          (–º–∞–∫—Å–∏–º—É–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Å–µ–∫, default 5)
# TIMEZONE, MORNING, NIGHT          (—É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –≤ settings.py)

_DEFAULT_MESSAGES: Sequence[str] = (
    "–ó–¥–æ—Ä–æ–≤–∞ –Ω–∞—Ä–æ–¥ üëã",
    "–ö–∞–∫ –¥–µ–ª–∞ —É –≤—Å–µ—Ö?",
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏‚Ä¶",
    "–ö–æ—Ñ–µ –∑–∞—à—ë–ª –∫–∞–∫ –Ω–∞–¥–æ ‚òï",
    "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?",
    "–ü–æ–π–º–∞–ª –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å üß†",
    "–ü–æ–≥–Ω–∞–ª–∏!",
    "–ú–∏–Ω—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ üôÇ",
)

def _now_tz():
    tz = get("TIMEZONE") or "Europe/Moscow"
    try:
        return time.time(), ZoneInfo(tz)
    except Exception:
        return time.time(), None


def _in_awake_window() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ–π—á–∞—Å –º–µ–∂–¥—É MORNING –∏ NIGHT –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º TZ."""
    _, tz = _now_tz()
    try:
        import datetime as dt
        now = dt.datetime.now(tz or dt.timezone.utc)
    except Exception:
        return True  # –µ—Å–ª–∏ TZ —Å–ª–æ–º–∞–Ω ‚Äî –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º

    morning = int(get("MORNING") or 9)
    night = int(get("NIGHT") or 21)
    return morning <= now.hour <= night


def _pick_message(custom: Optional[Sequence[str]]) -> str:
    pool = [s.strip() for s in (custom or _DEFAULT_MESSAGES) if s and s.strip()]
    return random.choice(pool) if pool else "‚úåÔ∏è"


async def _idle_sleep(min_sec: int, max_sec: int) -> None:
    """–°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏."""
    span = max(min_sec, 1), max(max_sec, 2)
    delay = random.randint(*span)
    await asyncio.sleep(delay)


async def _worker_for_executor(
    executor_id: int,
    pool: BotPool,
    group: Union[int, str],
    messages: Optional[Sequence[str]],
    min_interval: int,
    max_interval: int,
    typing_max: int,
) -> None:
    """
    –û–¥–∏–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —à–ª—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç.
    """
    jitter = random.uniform(0.0, 1.0)  # –Ω–µ–º–Ω–æ–≥–æ —Ä–∞–∑–Ω–µ—Å—Ç–∏ –∑–∞–ø—É—Å–∫
    await asyncio.sleep(3.0 + jitter * 5.0)

    client = await pool.ensure_client(executor_id)
    if not client:
        return  # –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–ø–æ–∫–æ–π–Ω–æ

    while not stop_keepalive.is_set():
        # –æ–∫–Ω–æ –±–æ–¥—Ä—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        if not _in_awake_window():
            await asyncio.sleep(300)  # 5 –º–∏–Ω, –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∏–º –æ–∫–Ω–æ —Å–Ω–æ–≤–∞
            continue

        # –∏–º–∏—Ç–∞—Ü–∏—è "–ø–µ—á–∞—Ç–∞–µ—Ç..." –¥–ª—è –≥—Ä—É–ø–ø
        try:
            if typing_max > 0:
                typing_time = random.randint(1, max(1, typing_max))
                # ChatAction.TYPING –≤ –≥—Ä—É–ø–ø–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
                await client.send_chat_action(group, ChatAction.TYPING)
                await asyncio.sleep(typing_time)
        except Exception:
            # –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º typing
            pass

        # –æ—Ç–ø—Ä–∞–≤–∫–∞
        text = _pick_message(messages)
        try:
            await client.send_message(group, text)
        except FloodWait as e:
            # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —É—Ö–æ–¥–∏–º —Å–ø–∞—Ç—å —Ä–æ–≤–Ω–æ –Ω–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ API
            await asyncio.sleep(float(e.value))
        except PeerFlood:
            # —Å–∏–≥–Ω–∞–ª, —á—Ç–æ –º—ã —Å–ª–∏—à–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã ‚Üí –ø–∞—É–∑–∞ –ø–æ–¥–ª–∏–Ω–Ω–µ–µ
            await asyncio.sleep(3600)
        except Exception:
            # –ª—é–±—ã–µ –ø—Ä–æ—á–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥—ë–º, —á—Ç–æ–±—ã –Ω–µ –ª—É–ø–∏—Ç—å –≤ —Ü–∏–∫–ª
            await asyncio.sleep(60)

        # —Ä–∞–Ω–¥–æ–º–Ω–∞—è –ø–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await _idle_sleep(min_interval, max_interval)


async def start_keepalive(
    db: DatabaseController,
    pool: BotPool,
    *,
    group: Optional[Union[int, str]] = None,
    messages: Optional[Sequence[str]] = None,
    min_interval: Optional[int] = None,
    max_interval: Optional[int] = None,
    typing_max: Optional[int] = None,
) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ keepalive –¥–ª—è –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–∂–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å ‚Äî –≤–æ–∑—å–º—É—Ç—Å—è –∏–∑ settings.json.
    """
    if str(get("KEEPALIVE_ENABLED") or "true").lower() in ("0", "false", "no"):
        return

    group = group or (get("KEEPALIVE_GROUP") or "").strip()
    if not group:
        # –±–µ–∑ —á–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ–º
        return

    min_interval = int(min_interval if min_interval is not None else (get("KEEPALIVE_MIN_SEC") or 600))
    max_interval = int(max_interval if max_interval is not None else (get("KEEPALIVE_MAX_SEC") or 2400))
    typing_max = int(typing_max if typing_max is not None else (get("KEEPALIVE_TYPING_MAX") or 5))

    # —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    async with db.executors() as executors_repo:
        exec_ids = await executors_repo.get_ids()

    # –ø–æ –æ–¥–Ω–æ–º—É –≤–æ—Ä–∫–µ—Ä—É –Ω–∞ –∫–∞–∂–¥–æ–≥–æ
    for ex_id in exec_ids:
        if ex_id in _keepalive_tasks and not _keepalive_tasks[ex_id].done():
            continue
        _keepalive_tasks[ex_id] = asyncio.create_task(
            _worker_for_executor(
                ex_id,
                pool,
                group=group,
                messages=messages,
                min_interval=min_interval,
                max_interval=max_interval,
                typing_max=typing_max,
            )
        )


async def stop_keepalive_tasks() -> None:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ keepalive-–≤–æ—Ä–∫–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."""
    stop_keepalive.set()
    tasks = list(_keepalive_tasks.values())
    _keepalive_tasks.clear()
    if tasks:
        for t in tasks:
            t.cancel()
        await asyncio.gather(*tasks, return_exceptions=True)
    stop_keepalive.clear()
